package com.example.seouldata

import android.graphics.Color
import android.graphics.Typeface
import android.os.Build
import android.os.Bundle
import android.view.View
import android.widget.ImageButton
import android.widget.ScrollView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.widget.NestedScrollView
import com.bumptech.glide.Glide
import com.example.seouldata.databinding.ActivityFacilityBinding
import com.example.seouldata.dto.FacilitySummaryItem
import com.example.seouldata.util.TouchWrapper
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions
import com.google.android.material.tabs.TabLayout

class FacilityActivity : AppCompatActivity(), OnMapReadyCallback {

    private lateinit var binding: ActivityFacilityBinding
    private var facilityItem: FacilitySummaryItem? = null
    private lateinit var map: GoogleMap

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityFacilityBinding.inflate(layoutInflater)

        enableEdgeToEdge()
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        //ÏÉÅÎã® Îí§Î°úÍ∞ÄÍ∏∞
        val backBtn = findViewById<ImageButton>(R.id.btnBack)
        backBtn.setOnClickListener {
            finish()
        }

        val scrollView = findViewById<NestedScrollView>(R.id.scrollView)
        val touchWrapper = findViewById<TouchWrapper>(R.id.mapTouchWrapper)

        touchWrapper.onTouch = {
            scrollView.requestDisallowInterceptTouchEvent(true)
        }

        // Îßµ Ï§ÄÎπÑ
        val mapFragment = SupportMapFragment.newInstance()
        supportFragmentManager.beginTransaction()
            .replace(R.id.facilityMapContainer, mapFragment)
            .commit()

        mapFragment.getMapAsync(this)

        //intent Î∞õÍ∏∞
       facilityItem  = if (Build.VERSION.SDK_INT >= 33) {
            intent.getParcelableExtra("facilityItem", FacilitySummaryItem::class.java)
        } else {
            @Suppress("DEPRECATION")
            intent.getParcelableExtra("facilityItem")
        }

        // 2. ViewÏóê Î∞îÏù∏Îî©ÌïòÍ∏∞
        facilityItem?.let {
            binding.txtFacilityName.text = it.svcName
            binding.placeLocation.text=it.placeName

            val rawText = facilityItem?.detailContent ?: ""
            val formattedText = rawText
                //.replace("1.", "\n\n1.")   // Ïà´Ïûê-Ï†ê Ìå®ÌÑ¥
                .replace("2.", "\n\n2.")
                .replace("3.", "\n\n3.")
                .replace("‚óé", "\n\n‚óé")    // Ìï≠Î™© Íµ¨Î∂ÑÏûê
                .replace("‚Äª", "\n‚Äª")     // Ï£ºÏùòÏÇ¨Ìï≠ Í∞ïÏ°∞
            binding.tvDetailInfo.text=formattedText

            // üî• Ïù¥ÎØ∏ÏßÄ URLÏùÑ ImageViewÏóê GlideÎ°ú ÏÑ∏ÌåÖ
            Glide.with(this)
                .load(it.imgUrl) // URL
                .placeholder(R.drawable.img_loading) // Î°úÎî© Ï§ë ÌëúÏãúÌï† Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ (ÏÑ†ÌÉù)
                .error(R.drawable.img_loading) // Ïã§Ìå® Ïãú ÌëúÏãúÌï† Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ (ÏÑ†ÌÉù)
                .into(binding.facilityImage)

            // ÌïÑÏöîÌïú ÎßåÌÅº Ï∂îÍ∞ÄÎ°ú Î∞îÏù∏Îî© Í∞ÄÎä•!
        }




        //ÌÉ≠ ÏÑ†ÌÉùÏóê Îî∞Îùº ÎÇ¥Ïö© Ï†ÑÌôò
        binding.facilityTabs.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
            override fun onTabSelected(tab: TabLayout.Tab) {
                // Î™®Îì† ÌÉ≠ ÎÇ¥Ïö© Ïà®Í∏∞Í∏∞

                binding.layoutTabDetail.visibility = View.GONE
                binding.layoutTabUsage.visibility = View.GONE
                binding.layoutTabReview.visibility = View.GONE

                // ÏÑ†ÌÉùÎêú ÌÉ≠Ïóê Îî∞Îùº Î≥¥Ïù¥Í∏∞
                when (tab.position) {
                    0 -> binding.layoutTabDetail.visibility = View.VISIBLE
                    1 -> binding.layoutTabUsage.visibility = View.VISIBLE
                    2 -> binding.layoutTabReview.visibility = View.VISIBLE
                }
            }

            override fun onTabUnselected(tab: TabLayout.Tab) {}
            override fun onTabReselected(tab: TabLayout.Tab) {}
        })

        //ÎÇ†Ïßú ÏÑ†ÌÉù-> ÏãúÍ∞Ñ-> ÏòàÏïΩ ÌôúÏÑ±Ìôî
        // Ï¥àÍ∏∞ ÏÉÅÌÉú: ÏãúÍ∞Ñ ÏÑ†ÌÉù Î∞î, ÏòàÏïΩ ÏòÅÏó≠ Ïà®Í∏∞Í∏∞
        binding.timelineContainer.visibility = View.GONE
        binding.timeSlotContainer.visibility = View.GONE
        binding.timeSelectionSection.visibility = View.GONE
        binding.btnReserve.isEnabled = false

        var timeSelected = false // ÏãúÍ∞Ñ ÏÑ†ÌÉù Ïó¨Î∂Ä ÏÉÅÌÉú

        // ÎÇ†Ïßú ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏
        binding.dateChipGroup.setOnCheckedChangeListener { group, checkedId ->
            if (checkedId != View.NO_ID) {
                // ÎÇ†Ïßú ÏÑ†ÌÉù ‚Üí ÏãúÍ∞Ñ ÏÑ†ÌÉù Î∞î ÌëúÏãú
                binding.timelineContainer.visibility = View.VISIBLE
                binding.timeSlotContainer.visibility = View.VISIBLE

                // Ïù¥Ï†ÑÏóê ÏÑ†ÌÉùÌñàÎçò ÏãúÍ∞Ñ Ï¥àÍ∏∞Ìôî
                timeSelected = false
                binding.timeSelectionSection.visibility = View.GONE
                binding.btnReserve.isEnabled = false
            } else {
                // ÎÇ†Ïßú Ìï¥Ï†ú ‚Üí Î™®Îëê Ïà®ÍπÄ
                binding.timelineContainer.visibility = View.GONE
                binding.timeSlotContainer.visibility = View.GONE
                binding.timeSelectionSection.visibility = View.GONE
                binding.btnReserve.isEnabled = false
            }
        }

        // ÏãúÍ∞Ñ Ïä¨Î°Ø ÌÅ¥Î¶≠ Ï≤òÎ¶¨ ÏòàÏãú (ÏßÅÏ†ë ÎßåÎì† ÏãúÍ∞Ñ Ïä¨Î°Ø TextViewÎì§Ïóê Í∞ÅÍ∞Å Ïó∞Í≤∞ ÌïÑÏöî)
        for (i in 0 until binding.timeSlotContainer.childCount) {
            val view = binding.timeSlotContainer.getChildAt(i)
            if (view is TextView && view.text.contains("~")) {
                view.setOnClickListener {
                    // ÏÑ†ÌÉù Ïãú Ïä§ÌÉÄÏùº Î≥ÄÍ≤Ω
                    resetAllTimeSlotStyles(binding)
                    view.setBackgroundResource(R.drawable.bg_time_slot_selected)
                    view.setTextColor(Color.WHITE)
                    view.setTypeface(null, Typeface.BOLD)

                    // ÏãúÍ∞Ñ/Í∏àÏï° Ï†ïÎ≥¥ ÏÑ§Ï†ï (ÏòàÏãú)
                    binding.timeSummary.text = "Ï¥ù 1 ÏãúÍ∞Ñ"
                    binding.priceSummary.text = "10,000 Ïõê"

                    // ÏòàÏïΩ ÏòÅÏó≠ ÌëúÏãú
                    binding.timeSelectionSection.visibility = View.VISIBLE
                    binding.btnReserve.isEnabled = true
                    timeSelected = true
                }
            }
        }

        //ÏòàÏïΩ Î≤ÑÌäº ÌÅ¥Î¶≠Ïãú
        binding.btnReserve.setOnClickListener {
            Toast.makeText(this, "ÏòàÏïΩÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
        }

    }

    //ÏãúÍ∞Ñ ÏÑ†ÌÉù Ïä¨Î°Ø Í∞ïÏ°∞Ïö© Ìï®Ïàò Ï∂îÍ∞Ä
    private fun resetAllTimeSlotStyles(binding: ActivityFacilityBinding) {
        for (i in 0 until binding.timeSlotContainer.childCount) {
            val view = binding.timeSlotContainer.getChildAt(i)
            if (view is TextView && view.text.contains("~")) {
                view.setBackgroundResource(R.drawable.bg_time_slot) // Í∏∞Î≥∏ Î∞∞Í≤Ω
                view.setTextColor(Color.BLACK)
                view.setTypeface(null, Typeface.NORMAL)
            }
        }
    }

    override fun onMapReady(googleMap: GoogleMap) {
        map = googleMap
//
//        facilityItem?.let { item ->
//            val latitude = item.y.toDouble()
//            val longitude = item.x.toDouble()
//            val facilityLocation = LatLng(latitude, longitude)
//
//            map.addMarker(
//                MarkerOptions()
//                    .position(facilityLocation)
//                    .title(item.placeName)
//            )
//            map.moveCamera(CameraUpdateFactory.newLatLngZoom(facilityLocation, 15f))
//    }
}
}